class "";

import СИС2             Classes СтроковыеФункции,ФункцииДокумента;
import                  Classes Библио,Конвертация.ФизЛица;
import ТББ_Базовый      Classes СтроковыеФункции;

inclass
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
--  func ПроверкаНастройки:logical;
--    Result = true;
--    if Сервис.Импорт_СотрудниковНастройка.ТипЗванияСотрудника = 0 then
--      Message('Не выполнена настройка импорта сотрудников!');
--      Return false;
--    end;
--  end;
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  func ЗагруженоВсе:logical;
    var locClassRecord  : Class Record;
    Result      = true;
    locClassRecord              = FindClass('ТБ69.ISF_СОТР') as Class Record;
    if locClassRecord<>nil then
      with Query.Create([locClassRecord]) do
        Select;
        while not Eof do
          if not ЗагруженСотр(Current.ТАБ as string) then
             Result       = false;
             Break;
           end;
           Next;
        end;--while not Eof
      end;--with Query
    end;
  end;--func ЗагруженоВсе

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc ИмпортПостоянныхНачислений(лосСотрИсф:ТБ69.ISF_СОТР;локПодрИсф:integer;локНазначение:Гарнец_ПерсоналБазовый.АтрибутыСотрудника.Назначение);
    var newRecordT9             : Бюджет_ЗПиДД.АтрибутыСотрудника.ПостоянныеНачисления;
    var SpOperT9                : Бюджет_ЗПиДД.Справочники.ВидыНачислений;
    var locDat                  : date;
    var локРазрядСотрудника     : Гарнец_ПерсоналБазовый.АтрибутыСотрудника.Разряд;
    var локТипСтажа             : Гарнец_ПерсоналБазовый.Справочники.ТипСтажа;
    var локСтажСотрудника       : Гарнец_ПерсоналБазовый.АтрибутыСотрудника.Стаж;
    --Внутренние функции...........................................................................
    func ВидНачисленияТ9(локКодИсф:string):Бюджет_ЗПиДД.Справочники.ВидыНачислений;   --вычисление вида операции по Т9
      with Query.Create([Бюджет_ЗПиДД.Справочники.ВидыНачислений]) do
        Filter          = 'RefISF.Exists(CodeISF="'+локКодИсф+'")';
        Select;
        if not (Bof and Eof) then
          Result        = Current as Бюджет_ЗПиДД.Справочники.ВидыНачислений;
        end;
      end;--with Query
    end;--func ВидНачисленияТ9
    --.............................................................................................
    func ТипСтажаТ9(локКодИсф:string):Гарнец_ПерсоналБазовый.Справочники.ТипСтажа;      --вычисление типа стажа, указанного в постоянных начисления Т6 как Т9
      with Query.Create([Гарнец_ПерсоналБазовый.Справочники.ТипСтажа]) do
        Filter          = 'CodeISF="'+локКодИсф+'" and OurINN="'+Переменные.ИНН+'"';
        Select;
        if not (Bof and Eof) then
          Result        = Current as Гарнец_ПерсоналБазовый.Справочники.ТипСтажа;
        end;
      end;--with Query
    end;
    --.............................................................................................
    func ТарифныйРазрядТ9(локКодИсф:string):Гарнец_ПерсоналБазовый.Справочники.Разряды;
      with Query.Create([Гарнец_ПерсоналБазовый.Справочники.Разряды]) do
        Filter          = 'CodeISF="'+локКодИсф+'" and OurINN="'+Переменные.ИНН+'"';
        Select;
        if not (Bof and Eof) then
          Result        = Current as Гарнец_ПерсоналБазовый.Справочники.Разряды;
        end;
      end;--with Query
    end;
    --.............................................................................................
    --Окончание внутренних функций.................................................................
    with Query.Create([ТБ69.ISF_СОТР_НАЧ]) do
      Filter                    = 'ПОДР='+Str(локПодрИсф);
      Order                     = 'ДАТН+';
      Select;
      while not Eof do
        SpOperT9                        = ВидНачисленияТ9(Current.Код as string);
        if SpOperT9<>nil then
          newRecordT9                   = Бюджет_ЗПиДД.АтрибутыСотрудника.ПостоянныеНачисления.Create;
          newRecordT9.Назначение        = локНазначение;
          newRecordT9.ДатаНачала        = Current.ДатН as Date;
          locDat                        = Current.ДатК as Date;
          newRecordT9.ДатаОкончания     = if(locDat=01.01.9999,nil,locDat);
          newRecordT9.ВидОперации       = SpOperT9;
          --обработка оклада по тарифному разряду
          if SpOperT9.ТипРасчета.Код in ['1103','1104','2122'] then
            локРазрядСотрудника                 = Гарнец_ПерсоналБазовый.АтрибутыСотрудника.Разряд.Create;
            локРазрядСотрудника.Назначение      = локНазначение;
            локРазрядСотрудника.ДатаНачала      = Current.ДатН as Date;
            locDat                              = Current.ДатК as Date;
            newRecordT9.ДатаОкончания           = if(locDat=01.01.9999,nil,locDat);
            локРазрядСотрудника.ТарифныйРазряд  = ТарифныйРазрядТ9(Current.Поле4 as string);
            локРазрядСотрудника.Post;
          end;
          --обработка надбавки за стаж
          if SpOperT9.ТипРасчета.Код in ['1250','2250','2251'] then
            локТипСтажа                         = ТипСтажаТ9(Current.Поле4 as string);
            newRecordT9.ЗначениеПоля4           = локТипСтажа;
            локСтажСотрудника                   = Гарнец_ПерсоналБазовый.АтрибутыСотрудника.Стаж.Create;
            локСтажСотрудника.Назначение        = локНазначение;
            локСтажСотрудника.ДатаНачала        = Current.ДатН as Date;
            локСтажСотрудника.ТипСтажа          = локТипСтажа;
            локСтажСотрудника.Лет               = лосСотрИсф.ЛТСВ;
            локСтажСотрудника.Месяцев           = лосСотрИсф.МССВ;
            локСтажСотрудника.Дней              = лосСотрИсф.ДНСВ;
            локСтажСотрудника.Post;
            #Warning 'Считывние выслуги Т6 - только для первой сложной системы!';
          end;
          --обработка индивидуальных процентных надбавок
          if SpOperT9.ТипРасчета.Код in ['1202','2203','2204'] then
            newRecordT9.ЗначениеПоля3   = Current.Поле2 as numeric;
          end;
          newRecordT9.Post;
        end;
        Next;
      end;--while not Eof
    end;--with Query
  end;--proc ИмпортПостоянныхНачислений
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  func Выполнение:integer;
    var locRecordIsfFl  : Record;
    var locRecordISF    : Record;
    var locFIO          : string;
    var locFm           : string;
    var locIm           : string;
    var locOt           : string;
    var locDr           : date;
    var RecordFl        : Базовый.Данные.Субъект;
    var RecordSotr      : Базовый.Данные.Субъект;
    var k               : integer;
    --Внутренние функции...........................................................................
    func ПериодРаботыЗагружен(var locRecord     : Гарнец_ПерсоналБазовый.АтрибутыСотрудника.ПериодРаботы):logical;
      if RecordSotr<>nil then
        locRecord       = QueryRecord(Гарнец_ПерсоналБазовый.АтрибутыСотрудника.ПериодРаботы,'Сотрудник='+Str(RecordSotr)) as Гарнец_ПерсоналБазовый.АтрибутыСотрудника.ПериодРаботы;
        Result          = locRecord<>nil;
      end;
    end;--proc ПериодРаботыЗагружен
    --.............................................................................................
    func НазначенияЗагружены:logical;
      var locRecord     : Гарнец_ПерсоналБазовый.АтрибутыСотрудника.Назначение;
      if RecordSotr<>nil then
        locRecord       = QueryRecord(Гарнец_ПерсоналБазовый.АтрибутыСотрудника.Назначение,'Сотрудник='+Str(RecordSotr)) as Гарнец_ПерсоналБазовый.АтрибутыСотрудника.Назначение;
        Result          = locRecord<>nil;
      end;
    end;--func НазначенияЗагружены
    --.............................................................................................
    func ПоследняяДолжность(локЗаписьСотрИсф:integer;локЗаписьНазначенияИсф:integer):Базовый.Справочники.РольСубъекта;
      var RecordSotrDlj         : ТБ69.ISF_СОТР_ДОЛЖН;
      RecordSotrDlj             = QueryRecord(ТБ69.ISF_СОТР_ДОЛЖН,'СОТР='+Str(локЗаписьСотрИсф)+' and ПОДР='+Str(локЗаписьНазначенияИсф),'ДАТН-') as ТБ69.ISF_СОТР_ДОЛЖН;
      if RecordSotrDlj<>nil then
        Result                  = ДолжностьПоКодуИсф(RecordSotrDlj.Код);
      end;
    end;--func ПоследняяДолжность
    --.............................................................................................
    proc ИмпортНазначений(RecordWorkP9  : Гарнец_ПерсоналБазовый.АтрибутыСотрудника.ПериодРаботы);
      var RecordWorkN9          : Гарнец_ПерсоналБазовый.АтрибутыСотрудника.Назначение;
      var locDat                : date;
      if not НазначенияЗагружены then
        with Query.Create([ТБ69.ISF_СОТР_ПЕРЕМЕЩ]) do
          Filter                = 'СОТР='+Str(locRecordISF.DocId);
          Order                 = 'ДАТПЕРН+';
          Select;
          while not Eof do
            RecordWorkN9                = Гарнец_ПерсоналБазовый.АтрибутыСотрудника.Назначение.Create;
            RecordWorkN9.Сотрудник      = RecordSotr;
            RecordWorkN9.ПериодРаботы   = RecordWorkP9;
            RecordWorkN9.Подразделение  = ПодразделениеПоКодуИсф(Current.КОДПОДР as string);
            RecordWorkN9.Должность      = ПоследняяДолжность(Current.СОТР as integer,Current.DocId as integer);
            RecordWorkN9.ДатаНачала     = Current.ДатПерН as date;
            locDat                      = Current.ДатПерК as date;
            RecordWorkN9.ДатаОкончания  = if(locDat=01.01.9999,nil,locDat);
            RecordWorkN9.КолСтавок      = 1;
            RecordWorkN9.ТипГрафика     = ТипГрафикаПоКодуИсф(Current.КОДГРРАБ as string);
            RecordWorkN9.ПрименятьВычеты= true;
            RecordWorkN9.Post;
            ИмпортПостоянныхНачислений(locRecordISF as ТБ69.ISF_СОТР,Current.DocId as integer,RecordWorkN9);
            Next;
          end;
        end;--with Query
      end;--if not НазначенияЗагружены
    end;--proc ИмпортНазначений
    --.............................................................................................
    proc ИмпортПериодаРаботы;
      var RecordWorkP6          : Record;
      var RecordWorkP9          : Гарнец_ПерсоналБазовый.АтрибутыСотрудника.ПериодРаботы;
      var locDat                : date;
      if not ПериодРаботыЗагружен(RecordWorkP9) then
        RecordWorkP9                    = Гарнец_ПерсоналБазовый.АтрибутыСотрудника.ПериодРаботы.Create;
        RecordWorkP6                    = QueryRecord(ТБ69.ISF_СОТР_ПЕРЕМЕЩ,'СОТР='+Str(locRecordISF.DocId),'ДАТПЕРН+');
        if RecordWorkP6<>nil then
          RecordWorkP9.Сотрудник        = RecordSotr;
          RecordWorkP9.ФормаЗачисления  = ФормаЗачисленияПоКодуИсф(RecordWorkP6.КодЗач as string);
          RecordWorkP9.ДатаПриема       = RecordWorkP6.ДатПерН as date;
          RecordWorkP9.ДатаНачала       = RecordWorkP6.ДатПерН as date;
        end;
        RecordWorkP6                    = QueryRecord(ТБ69.ISF_СОТР_ПЕРЕМЕЩ,'СОТР='+Str(locRecordISF.DocId),'ДАТПЕРН-');
        if RecordWorkP6<>nil then
          locDat                        = RecordWorkP6.ДатПерК as date;
          if locDat<>01.01.9999 then
          RecordWorkP9.ДатаОкончания    = RecordWorkP6.ДатПерК as date;
          RecordWorkP9.ДатаУвольнения   = RecordWorkP6.ДатПерК as date;
          end;
        end;
        RecordWorkP9.Post;
        ИмпортНазначений(RecordWorkP9);
      end;
    end;--proc ИмпортПериодаРаботы
    --.............................................................................................
    func РольЗагружена(локРоль       : Базовый.Справочники.РольСубъекта):logical;
      with  Query.Create([Гарнец_ПерсоналБазовый.АтрибутыФизлица.Роль]) do
        Filter          = 'Физлицо='+str(RecordFl)+' and Роль='+Str(локРоль);
        Select;
        Result          = not (Bof and Eof);
        Close;
      end;
    end;--func РольЗагружена
    --.............................................................................................
    --в Т6 звания привязывались к сотруднику, а не к физлицу! В Т9 звания импортируются в привязке к физику.
    proc ИмпортИсторииЗванийФл;
      var локРоль               : Базовый.Справочники.РольСубъекта;
      var RecordWorkZ9          : Гарнец_ПерсоналБазовый.АтрибутыФизлица.Роль;
      var locDat                : date;
      with Query.Create([ТБ69.ISF_СОТР_ЗВА]) do
        Filter                  = 'СОТР='+Str(locRecordISF.DocId);
        Order                   = 'ДАТН+';
        Select;
        while not Eof do
          локРоль                       = Библио.ЗваниеПоКодуИсф(Current.Код as string);
          if not РольЗагружена(локРоль) then
            RecordWorkZ9                = Гарнец_ПерсоналБазовый.АтрибутыФизлица.Роль.Create;
            RecordWorkZ9.Физлицо        = RecordFl;
            RecordWorkZ9.ДатаНачала     = Current.ДатН as date;
            locDat                      = Current.ДатК as date;
            RecordWorkZ9.ДатаОкончания  = if(locDat=01.01.9999,nil,locDat);
            RecordWorkZ9.Роль           = Библио.ЗваниеПоКодуИсф(Current.Код as string);
            RecordWorkZ9.Основание      = Current.Приказ as string;
            RecordWorkZ9.Post;
          end;
          Next;
        end;--while not
        Close;
      end;--with Query
    end;--proc ИмпортИсторииЗванийФл
    --.............................................................................................
    --В Т6 счета (читай - пластиковые карты) привязывались к сотруднику, а не к физлицу! В Т9 номера счетов/пластиковых карт импортируются в привязке к физику.
    func СчетЗагружен(локНомерСчета:string):logical;
      with  Query.Create([Базовый.Справочники.БанковскиеРеквизиты]) do
        Filter          = 'Субъект='+str(RecordFl)+' and РСчет="'+локНомерСчета+'"';
        Select;
        Result          = not (Bof and Eof);
        Close;
      end;
    end;--func СчетЗагружен
    --.............................................................................................
    proc ИмпортСчетов;
      var локНомерСчета : string;
      var newCountRecord: Базовый.Справочники.БанковскиеРеквизиты;
      if locRecordISF<>nil then
        локНомерСчета   = locRecordISF.СчетБанк as string;
        if локНомерСчета<>nil then
          if not СчетЗагружен(локНомерСчета) then
            newCountRecord                      = Базовый.Справочники.БанковскиеРеквизиты.Create;
            newCountRecord.БанкИмя              = locFIO;
            newCountRecord.Субъект              = RecordFl;
            --определение бренда (банка)
            if    locRecordISF.БАНК=1 then
              newCountRecord.Бренд              = QueryRecord(Базовый.Справочники.Брэнд,'Код="Банк.СБРФ"') as Базовый.Справочники.Брэнд;
              newCountRecord.РСчет              = локНомерСчета;
              newCountRecord.НазначениеСчета    = 'р/с '+БанкСчетПоРазрядам(локНомерСчета);
            elsif locRecordISF.БАНК=2 then
              newCountRecord.Бренд              = QueryRecord(Базовый.Справочники.Брэнд,'Код="Банк.Возрождение"') as Базовый.Справочники.Брэнд;
              newCountRecord.РСчет              = локНомерСчета;
              newCountRecord.НазначениеСчета    = 'р/с '+БанкСчетПоРазрядам(локНомерСчета);
            elsif locRecordISF.БАНК=3 then
              newCountRecord.Бренд              = QueryRecord(Базовый.Справочники.Брэнд,'Код="Банк.БМ"') as Базовый.Справочники.Брэнд;
              newCountRecord.НомерБанкКарты     = локНомерСчета;
              newCountRecord.НазначениеСчета    = 'б/к '+БанкКартаПоРазрядам(локНомерСчета);
            elsif locRecordISF.БАНК=4 then
              newCountRecord.Бренд              = QueryRecord(Базовый.Справочники.Брэнд,'Код="Банк.РосЕвроБанк"') as Базовый.Справочники.Брэнд;
              newCountRecord.НомерБанкКарты     = локНомерСчета;
              newCountRecord.НазначениеСчета    = 'б/к '+БанкКартаПоРазрядам(локНомерСчета);
            elsif locRecordISF.БАНК=5 then
              newCountRecord.Бренд              = QueryRecord(Базовый.Справочники.Брэнд,'Код="Банк.ВТБ24"') as Базовый.Справочники.Брэнд;
              newCountRecord.НомерБанкКарты     = локНомерСчета;
              newCountRecord.НазначениеСчета    = 'б/к '+БанкКартаПоРазрядам(локНомерСчета);
            end;
            --определение карточного продукта
            if    locRecordISF.КАРТПРОД=1 then
              newCountRecord.ТипБанкКарты       = QueryRecord(Бюджет_ЗПиДД.Справочники.ТипКартПродукта,'Код="00011"') as Бюджет_ЗПиДД.Справочники.ТипКартПродукта;
            elsif locRecordISF.КАРТПРОД=2 then
              newCountRecord.ТипБанкКарты       = QueryRecord(Бюджет_ЗПиДД.Справочники.ТипКартПродукта,'Код="00003"') as Бюджет_ЗПиДД.Справочники.ТипКартПродукта;
            elsif locRecordISF.КАРТПРОД=3 then
              newCountRecord.ТипБанкКарты       = QueryRecord(Бюджет_ЗПиДД.Справочники.ТипКартПродукта,'Код="00013"') as Бюджет_ЗПиДД.Справочники.ТипКартПродукта;
            end;
            newCountRecord.Валюта               = QueryRecord(Базовый.Справочники.ЕдиницаИзмерения,'Код="руб"') as Базовый.Справочники.ЕдиницаИзмерения;
            newCountRecord.Post;
          end;
        end;
      end;
    end;--proc ИмпортСчетов
    --.............................................................................................
    proc ИмпортНалоговыхВычетов;

    end; --proc ИмпортНалоговыхВычетов

    --Окончание внутренних функций.................................................................
    with Query.Create([ТБ69.ISF_СОТР]) do
      Select;
      for k = 1..Count do
      --for k = 1..5     do
        if not ЗагруженСотр(Current.ТАБ as string) then
          locRecordISF          = Current as record;
          locRecordIsfFl        = ФизлицоИсфПоКлючу(locRecordISF.ФЛ as integer);
          locFIO                = locRecordIsfFl.ФИОТ as string;
          locFm                 = СБольшойБуквы(Trim(ExtractWord(locFIO,1)));
          locIm                 = СБольшойБуквы(Trim(ExtractWord(locFIO,2)));
          locOt                 = СБольшойБуквы(Trim(ExtractWord(locFIO,3)));
          locFIO                = locFm+' '+locIm+' '+locOt;
          locDr                 = locRecordIsfFl.ДРОЖД as Date;
          if ЗагруженоФл(locFm,locIm,locOt,locDr,RecordFl)  then
            RecordSotr                          = Базовый.Данные.Субъект.Create;
            RecordSotr.Assign(RecordFl);
            RecordSotr.ФизическоеЛицо           = false;
            RecordSotr.Сотрудник                = true;
            RecordSotr.Пол                      = nil;
            RecordSotr.ДатаРождения             = nil;
            RecordSotr.ДолжностьСотрудника      = ДолжностьПоКодуИсф(Current.КОДДОЛЖН as string);
            RecordSotr.ПодразделениеСотрудника  = ПодразделениеПоКодуИсф(Current.КОДПОДР as string);
            RecordSotr.Субъект                  = Переменные.ЗагруженноеУчреждение;
            RecordSotr.ФизЛицо                  = RecordFl;
            RecordSotr.НашеУчреждение           = Переменные.ЗагруженноеУчреждение;
            RecordSotr.Код                      = ТББ_Базовый.Нумератор.НовыйКод(RecordSotr);
            RecordSotr.ТабНомер                 = ТББ_Базовый.Библио.ТабНомерПоКоду(RecordSotr.Код);
            RecordSotr.ГражданствоФл            = nil;
            RecordSotr.НалоговыйСтатусФл        = nil;
            RecordSotr.CodeISF                  = Current.ТАБ as string;
            RecordSotr.Post;
            ИмпортПериодаРаботы;
            ИмпортИсторииЗванийФл;
            ИмпортСчетов;
          end;
        end;
        Hint('Импорт (обновление) данных о сотрудниках...',k,Count);
        Next;
      end;
    end;--with Query
  end;--func Выполнение



inobject


end