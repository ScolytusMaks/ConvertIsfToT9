class inherited ТББ_Базовый.Базовые.БазовыйБланк "Конвертер из ТБ 6.9";

inclass         
  stored var этап_ВЗвСтавкиИгнорировать   : logical;
  stored var этап_СЗвСтавкиИгнорировать   : logical;

inobject
  var  кнВыполнение1            : Button;
  var  кнВыполнение2            : Button;
  var  кнВыполнение3            : Button;
  var  кнВыполнение4            : Button;
  var  кнВыполнение5            : Button;

  var ЗагружаемоеУчреждение     : string;
  var ИНН                       : string;
  var ЗагруженноеУчреждение     : Базовый.Данные.Субъект;

  --Этапы загрузки
  --Общие справочники для всех учреждений, вкл.объединяемые
  var этап_Календари            : logical;      var этап_КалендариНадпись       : string = 'Производственные календари (типы)';
  var этап_КБК                  : logical;      var этап_КбкНадпись             : string = 'Рабочие КБК';
  --Справочники импортируемого учреждения
  var этап_Учреждние            : logical;      var этап_УчреждениеНадпись      : string = 'Учреждение';
  var этап_Бюджеты              : logical;      var этап_БюджетыНадпись         : string = 'Бюджеты ЗП (ДД)';
  var этап_Звания               : logical;      var этап_ЗванияНадпись          : string = 'Воинские и спец.звания';
  var этап_ВЗвСтавки            : logical;      var этап_ВЗвСтавкиНадпись       : string = 'Ставки воинских званий';
  var этап_СЗвСтавки            : logical;      var этап_СЗвСтавкиНадпись       : string = 'Ставки спец.званий';
  var этап_Должности            : logical;      var этап_ДолжностиНадпись       : string = 'Должности';
  var этап_Квалификации         : logical;      var этап_КвалификацииНадпись    : string = 'Квалификации';
  var этап_КвалСтавки           : logical;      var этап_КвалСтавкиНадпись      : string = 'Ставки надбавок за квалификацию';
                                                var этап_РазрядыНастройка       : string = 'Настройка';
  var этап_Разряды              : logical;      var этап_РазрядыНадпись         : string = 'Ставки тарифных разрядов';
  var этап_ТипыСтажа            : logical;      var этап_ТипыСтажаНадпись       : string = 'Типы стажа';
                                                var этап_СтавкиСтажаНадпись     : string = 'Ставки надбавок за стаж';

  var секцИмпортНачислений      : TemplateSection;
  var секцИмпортУдержаний       : TemplateSection;
  var КодИфОпераций             : string[];
  var НаимИфОпераций            : string[];
  var этап_ИмпортНач            : logical[];
  var этап_ИмпортУд             : logical[];
  var этап_ИмпортУдНдфл         : logical;      var этап_ИмпортУдНдфлНадпись    : string = 'Импорт вида удержания "НДФЛ"';
  var этап_ИмпортУдБезНал       : logical;      var этап_ИмпортУдБезНалНадпись  : string = 'Импорт вида удержания "Безналичный расчет"';

  var этап_ФизЛица              : logical;      var этап_ФизлицаНадпись         : string = 'Физлица';
  var этап_Сотрудники           : logical;      var этап_СотрудникиНадпись      : string = 'Сотрудники';


--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
 proc ФормированиеТаблицыИф;
    var локмИстФин      : string[2];
    var k               : integer;
    локмИстФин                  = Библио.ИсточникиФинансированияИСФ;
    for k = 1..LengthOfArray(локмИстФин) do
      КодИфОпераций[k]          = локмИстФин[k,1];
      НаимИфОпераций[k]         = локмИстФин[k,2];
    end;
    секцИмпортНачислений.Count  = LengthOfArray(локмИстФин);
    секцИмпортУдержаний.Count   = LengthOfArray(локмИстФин);
 end;
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc ПроверкаВыполнения;
    var k               : integer;
    --общие
    этап_Календари      = Конвертация.Календари.ЗагруженоВсе;
    этап_КБК            = Конвертация.КБК.ЗагруженоВсе;
    этап_Звания         = Конвертация.Звания.ЗагруженоВсе;
    этап_ВЗвСтавки      = Конвертация.СтавкиРолей.Загружено(ТББ_Базовый.КонстантыРолей.рольВоинскЗвание);
    этап_СЗвСтавки      = Конвертация.СтавкиРолей.Загружено(ТББ_Базовый.КонстантыРолей.рольСпецЗвание);
    этап_Должности      = Конвертация.Должности.ЗагруженоВсе;
    этап_Квалификации   = Конвертация.Квалификации.ЗагруженоВсе;
    этап_КвалСтавки     = Конвертация.СтавкиРолей.Загружено(ТББ_Базовый.КонстантыРолей.рольКвалификация);
    этап_Разряды        = Конвертация.СтавкиРазрядов.ЗагруженоВсе;
    этап_ТипыСтажа      = Конвертация.ТипыСтажа.ЗагруженыВсеТипыСтажа;
    --частные
    этап_Учреждние      = Конвертация.НашеУчреждение.Загружено(ИНН);
    этап_Бюджеты        = Конвертация.Бюджеты.ЗагруженоВсе;
    --формирование таблицы ИФ для начислений
    ФормированиеТаблицыИф;
    --Начисления
    for k = 1..секцИмпортНачислений.Count do
      этап_ИмпортНач[k] = Конвертация.ВидыНачислений.ЗагруженоВсе(ЗагруженноеУчреждение,КодИфОпераций[k]);
    end;
    --Удержания
    for k = 1..секцИмпортУдержаний.Count do
      этап_ИмпортУд[k]  = Конвертация.ВидыУдержаний.ЗагруженоВсе(ЗагруженноеУчреждение,КодИфОпераций[k]);
    end;
    этап_ИмпортУдНдфл   = Конвертация.ВидыУдержаний.ИмпортНдфлВыполнен;
    этап_ИмпортУдБезНал = Конвертация.ВидыУдержаний.ИмпортБезНалВыполнен;
    --субъекты
    этап_Физлица        = Конвертация.Физлица.ЗагруженоВсе;
    этап_Сотрудники     = Конвертация.Сотрудники.ЗагруженоВсе;
    --Доступность кнопок
    кнВыполнение2.Enabled       = (этап_Календари and
                                   этап_КБК and
                                   этап_Звания and
                                   этап_Должности and
                                   этап_Квалификации and
                                   этап_КвалСтавки and
                                   этап_Разряды and
                                   этап_ТипыСтажа);
    if not этап_ВЗвСтавкиИгнорировать then
      кнВыполнение2.Enabled     = кнВыполнение2.Enabled and этап_ВЗвСтавки;
    end;
    if not этап_СЗвСтавкиИгнорировать then
      кнВыполнение2.Enabled     = кнВыполнение2.Enabled and этап_СЗвСтавки;
    end;
    кнВыполнение3.Enabled       = (этап_Учреждние and этап_Бюджеты);
    кнВыполнение4.Enabled       = true;
    for k = 1..LengthOfArray(этап_ИмпортНач) do
      if not этап_ИмпортНач[k] then
        кнВыполнение4.Enabled   = false;
        Break;
      end;
    end;
    if кнВыполнение4.Enabled then
      for k = 1..LengthOfArray(этап_ИмпортУд) do
        if not этап_ИмпортУд[k] then
          кнВыполнение4.Enabled = false;
          Break;
        end;
      end;
    end;
    кнВыполнение4.Enabled       = (кнВыполнение4.Enabled and этап_ИмпортУдНдфл); -- and этап_ИмпортУдБезНал  --не всегда
    кнВыполнение5.Enabled       = (этап_ФизЛица and этап_Сотрудники);
  end;--proc ПроверкаВыполнения
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc ИдентификацияУчреждения;
    var locClassRecord  : Class Record;
    locClassRecord              = FindClass('ТБ69.ISF_НАСТРОЙКИ') as Class Record;
    if locClassRecord=nil then
      ЗагружаемоеУчреждение     = 'НЕ ОПРЕДЕЛЕНО!!!';
      ИНН                       = nil;
      ЗагруженноеУчреждение     = nil;
    else
      with Query.Create([locClassRecord]) do
        Filter                  = 'ИНН<>nil';
        Select;
        if (Bof and Eof) then
          ЗагружаемоеУчреждение = 'НЕ ОПРЕДЕЛЕНО!!!';
          ИНН                   = nil;
        else
          Last;
          ЗагружаемоеУчреждение = Current.Наим as string;
          ИНН                   = Current.ИНН as string;
        end;
      end;--with Query
      if   ЗагружаемоеУчреждение<>'НЕ ОПРЕДЕЛЕНО!!!' and ИНН<>nil then
        Конвертация.НашеУчреждение.Загружено(ИНН,ЗагруженноеУчреждение);
      end;
    end;
    Переменные.ЗагружаемоеУчреждение    = ЗагружаемоеУчреждение;
    Переменные.ИНН                      = ИНН;
    Переменные.ЗагруженноеУчреждение    = ЗагруженноеУчреждение;
  end;--proc ИдентификацияУчреждения;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc кнВыполнение1ПриНажатии(Sender :Button);
    var locForm         : BlankForm;
    этап_Календари      = false;
    этап_КБК            = false;
    этап_Звания         = false;
    этап_ВЗвСтавки      = false;
    этап_СЗвСтавки      = false;
    этап_Должности      = false;
    этап_Квалификации   = false;
    этап_КвалСтавки     = false;
    этап_Разряды        = false;
    этап_ТипыСтажа      = false;
    Template.Update;
    шаблон_ПриОткрытии(true);
    --общие
    if not этап_Календари then
      locForm                   = Сервис.Импорт_Календарей.Create;
      locForm.ShowEx(,Window.ModalWindow);
      этап_Календари            = Конвертация.Календари.ЗагруженоВсе;
      Template.Update;
    end;
    if not этап_Кбк then
      locForm                   = Сервис.Импорт_РабочихКбк.Create;
      locForm.ShowEx(,Window.ModalWindow);
      этап_Кбк                  = Конвертация.КБК.ЗагруженоВсе;
      Template.Update;
    end;
    --справочники званий и ставок
    if not этап_Звания then
      locForm                   = Сервис.Импорт_Званий.Create;
      locForm.ShowEx(,Window.ModalWindow);
      этап_Звания               = Конвертация.Звания.ЗагруженоВсе;
      Template.Update;
    end;
    if этап_Звания and not этап_ВЗвСтавки and not этап_ВЗвСтавкиИгнорировать then
      Конвертация.СтавкиРолей.Выполнение(ТББ_Базовый.КонстантыРолей.рольВоинскЗвание);
      этап_ВЗвСтавки            = Конвертация.СтавкиРолей.Загружено(ТББ_Базовый.КонстантыРолей.рольВоинскЗвание);
      Template.Update;
    end;
    if этап_Звания and not этап_СЗвСтавки and not этап_СЗвСтавкиИгнорировать then
      Конвертация.СтавкиРолей.Выполнение(ТББ_Базовый.КонстантыРолей.рольСпецЗвание);
      этап_СЗвСтавки            = Конвертация.СтавкиРолей.Загружено(ТББ_Базовый.КонстантыРолей.рольСпецЗвание);
      Template.Update;
    end;
    --справочник должностей
    if not этап_Должности then
      locForm                   = Сервис.Импорт_Должностей.Create;
      locForm.ShowEx(,Window.ModalWindow);
      этап_Должности            = Конвертация.Должности.ЗагруженоВсе;
      Template.Update;
    end;
    --справочники квалификаций и ставок
    if not этап_Квалификации then
      locForm                   = Сервис.Импорт_Квалификаций.Create;
      locForm.ShowEx(,Window.ModalWindow);
      этап_Квалификации         = Конвертация.Квалификации.ЗагруженоВсе;
      Template.Update;
    end;
    if этап_Квалификации and not этап_КвалСтавки then
      Конвертация.СтавкиРолей.Выполнение(ТББ_Базовый.КонстантыРолей.рольКвалификация);
      этап_КвалСтавки           = Конвертация.СтавкиРолей.Загружено(ТББ_Базовый.КонстантыРолей.рольКвалификация);
      Template.Update;
    end;
    if not этап_Разряды then
      locForm                   = Сервис.Импорт_Разрядов.Create;
      locForm.ShowEx(,Window.ModalWindow);
      этап_Разряды        = Конвертация.СтавкиРазрядов.ЗагруженоВсе;
      Template.Update;
    end;
    --стаж
    if not этап_ТипыСтажа then
      Конвертация.ТипыСтажа.Выполнение;
      этап_ТипыСтажа            = Конвертация.ТипыСтажа.ЗагруженыВсеТипыСтажа;
      Template.Update;
    end;



--    --субъекты
--    Конвертация.Физлица.Выполнение;
--    этап_Физлица                = Конвертация.Физлица.ЗагруженоВсе;
--    Template.Update;
--    Конвертация.Сотрудники.Выполнение;
--    этап_Сотрудники             = Конвертация.Сотрудники.ЗагруженоВсе;
--    Template.Update;


----    if Конвертация.Сотрудники.ПроверкаНастройки then
----      Конвертация.Сотрудники.Выполнение;
----    else
----      if CmOk=Сервис.Импорт_СотрудниковНастройка.ShowFormEx(,Window.ModalWindow) then
----        if Конвертация.Сотрудники.ПроверкаНастройки then
----           Конвертация.Сотрудники.Выполнение;
----        end;
----      end;
----    end;
----    этап_Сотрудники      = Конвертация.Сотрудники.ЗагруженоВсе;
----    Template.Update;
  end;--proc кнВыполнение1ПриНажатии
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc кнВыполнение2ПриНажатии(Sender :Button);
    этап_Учреждние              = false;
    этап_Бюджеты                = false;
    --основа
    if not этап_Учреждние then
      этап_Учреждние            = (CmOk=Конвертация.НашеУчреждение.Выполнение);
      Template.Update;
    end;
    if not этап_Бюджеты then
      этап_Бюджеты              = (CmOk=Конвертация.Бюджеты.Выполнение);                        
      Template.Update;
    end;
    ИдентификацияУчреждения;
  end;--proc кнВыполнение2ПриНажатии
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc кнВыполнение3ПриНажатии(Sender :Button);
    var k               : integer;
    var locForm         : BlankForm;
    этап_ИмпортНач      = nil;
    этап_ИмпортУд       = nil;
    этап_ИмпортУдНдфл   = false;
    этап_ИмпортУдБезНал = false;
    ФормированиеТаблицыИф;
    --библиотека видов начислений
    for k = 1..секцИмпортНачислений.Count do
      if not этап_ИмпортНач[k] then
        locForm                         = Сервис.Импорт_ВидовНачислений.Create;
        locForm.ЗагруженноеУчреждение   = ЗагруженноеУчреждение;
        locForm.КодИстФинИсф            = КодИфОпераций[k];
        locForm.ShowEx(,Window.ModalWindow);
        Template.Update;
      end;
    end;
    --библиотека видов удержаний
    for k = 1..секцИмпортУдержаний.Count do
      if not этап_ИмпортУд[k] then
        locForm                         = Сервис.Импорт_ВидовУдержаний.Create;
        locForm.ЗагруженноеУчреждение   = ЗагруженноеУчреждение;
        locForm.КодИстФинИсф            = КодИфОпераций[k];
        locForm.ShowEx(,Window.ModalWindow);
        Template.Update;
      end;
    end;
    --Вид удержания "НДФЛ"
    if not этап_ИмпортУдНдфл then
      Конвертация.ВидыУдержаний.ИмпортНдфл;
      этап_ИмпортУдНдфл         = Конвертация.ВидыУдержаний.ИмпортНдфлВыполнен;
      Template.Update;
    end;
    --Вид удержания "БезНал"
    if not этап_ИмпортУдБезНал then
      Конвертация.ВидыУдержаний.ИмпортБезНал;
      этап_ИмпортУдБезНал       = Конвертация.ВидыУдержаний.ИмпортБезНалВыполнен;
      Template.Update;
    end;
  end;--proc кнВыполнение3ПриНажатии
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc кнВыполнение4ПриНажатии(Sender :Button);
    этап_Физлица                = false;
    этап_Сотрудники             = false;
    Конвертация.Физлица.Выполнение;
    этап_Физлица                = Конвертация.Физлица.ЗагруженоВсе;
    Template.Update;
    Конвертация.Сотрудники.Выполнение;
    этап_Сотрудники             = Конвертация.Сотрудники.ЗагруженоВсе;
    Template.Update;
  end;--proc кнВыполнение4ПриНажатии
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc кнВыполнение5ПриНажатии(Sender :Button);

  end;--proc кнВыполнение5ПриНажатии
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--



  proc шаблон_ПриОткрытии(Create :Logical);
    inherited шаблон_ПриОткрытии(Create);
    ИдентификацияУчреждения;
    ПроверкаВыполнения;
  end;--proc шаблон_ПриОткрытии

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  func Поле_ПриВыводе(Cell :TemplateCell; Value :Variant;Action :Template.OutputTypes; var Format :String) :Variant;
    if  not(Cell.Contents in ['этап_ВЗвСтавки','этап_СЗвСтавки']) then
      if    Value=true then     Result    = 'ь';
      elsif Value=false then    Result    = 'ё';
      end;
    elsif Cell.Contents = 'этап_ВЗвСтавки' and not этап_ВЗвСтавкиИгнорировать then
      if    Value=true then     Result    = 'ь';
      elsif Value=false then    Result    = 'ё';
      end;
    elsif Cell.Contents = 'этап_СЗвСтавки' and not этап_СЗвСтавкиИгнорировать then
      if    Value=true then     Result    = 'ь';
      elsif Value=false then    Result    = 'ё';
      end;
    end;
  end;--func Поле_ПриВыводе

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc Поле_ПриРисовании(Cell :TemplateCell; Selected :Logical; var Color :Integer;var FieldColor :Integer; Font :Font);
    Font.Name   = 'Wingdings';
    if    Cell.Value=true then
      Font.Color        = СИС2.Константы.clGreen;
    elsif Cell.Value=false then
      Font.Color        = СИС2.Константы.clGray;
    end;
  end;--proc Поле_ПриРисовании

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  func Поле_ПриНажатии(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
    var locBlankForm    : BlankForm;
    --var locCardForm     : CardForm;
    var Index           : integer;
    var locRecord       : Record;
    proc ПоказатьТаблицуСтавок(локКонстантаРоли:integer);
      with Query.Create([Гарнец_ПерсоналБазовый.Справочники.СтавкиРолей]) do
        Filter                                = 'isGroup=-1 and ТипРоли='+Str(локКонстантаРоли);
        Select;
        if not (Bof and Eof) then
          locRecord                           = Current as record;
          locBlankForm                        = Гарнец_ПерсоналБазовый.Справочники.редСтавкиРолей.Create;
          locBlankForm.ShowEx(locRecord,Window.ModalWindow);
        else
          Message('Таблица ставок не создана!');
        end;
        Close;
      end;
    end;--proc ПоказатьТаблицуСтавок
    --.........................................................................
    if Action=Template.ButtonPressed  then
      if    Cell.Contents='этап_КалендариНадпись' then
        locBlankForm                            = Сервис.Импорт_Календарей.Create;
        locBlankForm.ShowEx(,Window.ModalWindow);
        этап_Календари                          = Конвертация.Календари.ЗагруженоВсе;
        Template.Update;
      elsif Cell.Contents='этап_КбкНадпись' then
        locBlankForm                            = Сервис.Импорт_РабочихКбк.Create;
        locBlankForm.ShowEx(,Window.ModalWindow);
        этап_КБК                                = Конвертация.КБК.ЗагруженоВсе;
        Template.Update;
      elsif Cell.Contents='этап_ЗванияНадпись' then
        locBlankForm                            = Сервис.Импорт_Званий.Create;
        locBlankForm.ShowEx(,Window.ModalWindow);
        этап_Звания                             = Конвертация.Звания.ЗагруженоВсе;
        Template.Update;
      elsif Cell.Contents='этап_ВЗвСтавкиНадпись' then
        ПоказатьТаблицуСтавок(ТББ_Базовый.КонстантыРолей.рольВоинскЗвание);
      elsif Cell.Contents='этап_СЗвСтавкиНадпись' then
        ПоказатьТаблицуСтавок(ТББ_Базовый.КонстантыРолей.рольСпецЗвание);
      elsif Cell.Contents='этап_ДолжностиНадпись' then
        locBlankForm                            = Сервис.Импорт_Должностей.Create;
        locBlankForm.ShowEx(,Window.ModalWindow);
        этап_Должности                          = Конвертация.Должности.ЗагруженоВсе;
        Template.Update;
      elsif Cell.Contents='этап_КвалификацииНадпись' then
        locBlankForm                            = Сервис.Импорт_Квалификаций.Create;
        locBlankForm.ShowEx(,Window.ModalWindow);
        этап_Квалификации                       = Конвертация.Квалификации.ЗагруженоВсе;
        Template.Update;
      elsif Cell.Contents='этап_КвалСтавкиНадпись' then
        ПоказатьТаблицуСтавок(ТББ_Базовый.КонстантыРолей.рольКвалификация);
      elsif Cell.Contents='этап_РазрядыНадпись' then
        Сервис.Импорт_Разрядов.ShowFormEx(,Window.ModalWindow);
      elsif Cell.Contents='этап_ТипыСтажаНадпись' then
        Гарнец_ПерсоналБазовый.Справочники.картТипСтажа.ShowFormEx(,,Window.ModalWindow);
      elsif Cell.Contents='этап_СтавкиСтажаНадпись' then
        Гарнец_ПерсоналБазовый.Справочники.картСтавкиПНВЛ.ShowFormEx(,'not Match(Код,"000*")',Window.ModalWindow);

      -----------------------------------------------------
      elsif Cell.Contents='этап_УчреждениеНадпись' then
        if ЗагруженноеУчреждение<>nil then
          Бюджет_ЗПиДД.Справочники.Субъект.РедНашеУчреждение.ShowFormEx(ЗагруженноеУчреждение,Window.ModalWindow);
        else
          Message('Импорт описания учреждения не выполнен!');
        end;
      elsif Cell.Contents='этап_БюджетыНадпись' then
        Бюджет_ЗПиДД.Справочники.картБюджеты.ShowFormEx(,,Window.ModalWindow);



      -----------------------------------------------------
      elsif Cell.Owner=секцИмпортНачислений then
        Index                                   = Cell.Frame as integer;
        locBlankForm                            = Сервис.Импорт_ВидовНачислений.Create;
        locBlankForm.КодИстФинИсф               = КодИфОпераций[Index];
        locBlankForm.ЗагруженноеУчреждение      = ЗагруженноеУчреждение;
        locBlankForm.ShowEx(,Window.ModalWindow);        --locForm.ShowEx(,Window.PopupWindow);
        этап_ИмпортНач[Index]                   = Конвертация.ВидыНачислений.ЗагруженоВсе(ЗагруженноеУчреждение,КодИфОпераций[Index]);
      elsif Cell.Owner=секцИмпортУдержаний then
        Index                                   = Cell.Frame as integer;
        locBlankForm                            = Сервис.Импорт_ВидовУдержаний.Create;
        locBlankForm.КодИстФинИсф               = КодИфОпераций[Index];
        locBlankForm.ЗагруженноеУчреждение      = ЗагруженноеУчреждение;
        locBlankForm.ShowEx(,Window.ModalWindow);        --locForm.ShowEx(,Window.PopupWindow);
        этап_ИмпортУд[Index]                    = Конвертация.ВидыУдержаний.ЗагруженоВсе(ЗагруженноеУчреждение,КодИфОпераций[Index]);
      -----------------------------------------------------
      elsif Cell.Contents='этап_ФизлицаНадпись' then
        ТББ_Базовый.Справочники.Субъект.картФизлицо.ShowFormEx(,,Window.ModalWindow);
      elsif Cell.Contents='этап_СотрудникиНадпись' then
        Бюджет_ЗПиДД.Справочники.Субъект.картСотрудник.ShowFormEx(,,Window.ModalWindow);
      end;
    end;
  end;

end