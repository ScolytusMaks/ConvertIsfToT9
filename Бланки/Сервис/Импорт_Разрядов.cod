class inherited ТББ_Базовый.Базовые.БазовыйБланк "Настройка импорта тарифных разрядов";
import СИС2             classes Функции;

inclass

  НаимГруппы                    : string[];
  ФильтрДляТБ                   : string[];

inobject
  var секцТаблицы               : TemplateSection;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc кнПримерПриНажатии(Sender :Button);
    НаимГруппы          = nil;
    ФильтрДляТБ         = nil;
    НаимГруппы[1]       = 'Тарифные разряды (общая таблица)';
    ФильтрДляТБ[1]      = 'Match(Код,"?.???")';
    НаимГруппы[2]       = 'Тарифные разряды (Моск.округ)';
    ФильтрДляТБ[2]      = 'Match(Код,"?.???М")';
    секцТаблицы.Count   = 2;
  end;--proc кнПримерПриНажатии
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  inobject public
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc кнОК_ПриНажатии(Sender :Button);
    var k                       : integer;
    var locGroup                : Гарнец_ПерсоналБазовый.Справочники.Разряды;
    var locRecord               : Гарнец_ПерсоналБазовый.Справочники.Разряды;
    var локмКлючСтавки          : integer[];
    var локмДатаИндексации      : Date[];
    if секцТаблицы.Count=0 then
      Message('Пожалуйста, заполните таблицу настройки!');
    end;
    for k = 1..секцТаблицы.Count do
      if НаимГруппы[k]=nil then
        Message('Пожалуйста, заполните таблицу настройки!');
        Break;
      else
        --Создание группы. Группы идентифицируются по наименованию.
        locGroup        = nil;
        if not Конвертация.СтавкиРазрядов.ЕстьТаблицаРазрядов(НаимГруппы[k],locGroup) then
          locGroup              = Гарнец_ПерсоналБазовый.Справочники.Разряды.Create;
          locGroup.isGroup      = true;
          locGroup.Код          = ТББ_Базовый.Нумератор.НовыйКод(locGroup);
          locGroup.Наим         = НаимГруппы[k];
          locGroup.Имя          = НаимГруппы[k];
          locGroup.OurINN       = Переменные.Инн;
          locGroup.Post;
        end;
        --Очистка массива ключей (UKey, которые должны войти в таблицу ставок)
        локмКлючСтавки          = nil;
        --Очистка массива дат индексации ставок
        локмДатаИндексации      = nil;
        --Создание записей разрядов
        with Query.Create([ТБ69.ISF_РАЗР]) do
          Filter                = ФильтрДляТБ[k];
          Order                 = 'Код+';
          Select;
          while not Eof do
            if not Конвертация.СтавкиРазрядов.Загружено(Current.Код as string) and locGroup<>nil then
              locRecord         = Гарнец_ПерсоналБазовый.Справочники.Разряды.Create;
              locRecord.GroupDoc= locGroup;
              locRecord.Код     =  Current.Наим as string;
--              locRecord.Код     = ТББ_Базовый.Нумератор.НовыйКод(locRecord);
--              locRecord.Наим    = Current.Наим as string;
--              locRecord.Имя     = Current.Наим as string;
              locRecord.CodeISF = Current.Код as string;
              locRecord.OurINN  = Переменные.Инн;
              locRecord.UKeyISF = Current.DocId as integer;
              locRecord.Post;
            end;
            AddInArray(локмКлючСтавки,Current.DocId,true);
            Next;
          end;--while not Eof
          Close;
        end;--with Query
        --Создание массива дат индексаций
        with Query.Create([ТБ69.ISF_ЗВА_СТАВКА]) do
          Filter        = 'CARDUKEY in '+Str(локмКлючСтавки);
          Select;
          while not Eof do
              AddInArray(локмДатаИндексации,Current.Период,true);
            Next;
          end;
          Close;
        end;--with Query
        --Создание позици индексаций
        with Query.Create([Гарнец_ПерсоналБазовый.Справочники.Разряды]) do
          Filter        = 'UKeyISF in '+Str(локмКлючСтавки);
          Select;
          while not Eof do
            ЗаписатьСтавкиРазрядов(Current as Гарнец_ПерсоналБазовый.Справочники.Разряды,локмДатаИндексации);
            Next;
          end;
          Close;
        end;--with Query
      end;
    end;
    inherited кнОК_ПриНажатии(Sender);
  end;--proc кнОК_ПриНажатии
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  inclass private
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
  proc ЗаписатьСтавкиРазрядов(locRecord:Гарнец_ПерсоналБазовый.Справочники.Разряды;локмДатаИндексации: Date[]);
    var t               : integer;
    var локСтавка       : numeric;
    for t = 1..LengthOfArray(локмДатаИндексации) do
      with Query.Create([ТБ69.ISF_РАЗР_СТАВКА]) do--поиск ставки
        Filter          = 'Период='+Str(локмДатаИндексации[t])+' and CARDUKEY='+Str(locRecord.UKeyISF);
        Order           = 'Период';
        Select;
        if not (Bof and Eof) then   --ВОТ ОНО!!!
          локСтавка     = Current.Значение as numeric;
        else
          локСтавка     = 0;
        end;
        Close;
      end;--with Query
      locRecord.Ставка[локмДатаИндексации[t]]  = локСтавка;    --Значение д.б.записано при любой ставке, вкл.нулевую
    end;--for t
  end;--proc ЗаписатьСтавкиРазрядов
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--

end